"""
PGE Time of Day Segments
James Song 2023-Jan-30

Read PGE usage data and segment into daily Time of Day
"""

import csv
from datetime import datetime
from decimal import Decimal as D
import sys

# Rates on or after 2024-01-01
NEW_TOD_RATES = {
    'off': D('8.39'),
    'mid': D('15.77'),
    'peak': D('41.11'),
    'base': D('19.45')
}

def get_tod_category(d: datetime) -> str:
    if is_pge_holiday(d):
        return 'off'
    if d.weekday() in [5, 6]:  # Sat or Sun
        return 'off'
    if d.hour < 7 or d.hour >= 21:
        return 'off'
    if d.hour >= 7 and d.hour < 17:
        return 'mid'
    return 'on'

def is_pge_holiday(d: datetime) -> bool:
    # Off-peak on: 1/1, 7/4, Christmas, Memorial Day, Labor Day, Thanksgiving
    holidays = [(1, 1), (7, 4), (12, 25)]
    if (d.month, d.day) in holidays:
        return True

    # Memorial Day, last Monday of May
    if d.month == 5 and d.weekday() == 0 and d.day >= 25:
        return True

    # Labor Day, first Monday of September
    if d.month == 9 and d.weekday() == 0 and d.day <= 7:
        return True

    return False

def calculate_usage(data):
    result_data = {}
    
    for row in data:
        if len(row) != 6:
            continue  # Skip rows that don't have the expected number of columns
        
        type_str, date_str, start_time, end_time, usage_str, cost_str = row
        if date_str == 'DATE':
            continue  # Skip header
        
        usage = float(usage_str)
        
        # Parse date and time
        datetime_obj = datetime.strptime(date_str + " " + start_time, "%Y-%m-%d %H:%M")
        
        # Assign the usage to the corresponding time range
        if 0 <= datetime_obj.hour < 7:
            time_range = "Off AM"
        elif 7 <= datetime_obj.hour < 12:
            time_range = "Mid AM"
        elif 12 <= datetime_obj.hour < 17:
            time_range = "Mid PM"
        elif 17 <= datetime_obj.hour < 21:
            time_range = "Peak"
        else:
            time_range = "Off PM"
        
        # Initialize the dictionary if the date is encountered for the first time
        if date_str not in result_data:
            result_data[date_str] = {"Total kWh": 0.0, "Day": datetime_obj.strftime("%a")}
        
        # Assign usage to the corresponding time range in the dictionary
        result_data[date_str][time_range] = round(result_data[date_str].get(time_range, 0) + usage, 2)
        
        # Add usage to the total for the day
        result_data[date_str]["Total kWh"] += usage
    
    return result_data

def write_output(result_data, output_filename):
    with open(output_filename, 'w', newline='') as csvfile:
        fieldnames = ['Date', 'Day', 'Off AM', 'Mid AM', 'Mid PM', 'Peak', 'Off PM', 'Total kWh']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        
        writer.writeheader()
        
        # Write data
        for date, values in result_data.items():
            values["Total kWh"] = round(values["Total kWh"], 2)
            
            row = {'Date': date}
            row.update(values)
            writer.writerow(row)
    
    print(f"File '{output_filename}' written successfully!")

if len(sys.argv) < 2 or len(sys.argv) > 3:
    print("Usage: python script.py input_filename.csv [output_filename.csv]")
    sys.exit(1)

# Read the input CSV file from command-line argument
input_filename = sys.argv[1]
output_filename = sys.argv[2] if len(sys.argv) == 3 else input_filename.replace(".csv", "_out.csv")

with open(input_filename, 'r', encoding='utf-8') as csvfile:
    reader = csv.reader(csvfile)
    data = list(reader)

# Calculate usage
result_data = calculate_usage(data)

# Write output to CSV
write_output(result_data, output_filename)
